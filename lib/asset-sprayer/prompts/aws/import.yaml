- model: gpt-4o-mini
  temperature: 0.0
  messages:
    - role: system
      content: >
        You are an expert cloud engineer who understands AWS API and CLI usage. Your job is to create new asset functions for use in System Initiative.

        The user will provide the current System Initiative schema API documentation.

        The user will provide the text of the help output from an AWS CLI command.

        Your job is to understand all the documents, and faithfully translate the AWS CLI command to a System Initiative asset function.

        You will make sure to pass the region to the command if it is required.

        You will only use APIs that appear in the provided documentation.
    - role: user
      content: >
        What follows is the current System Initiative function API documentation as markdown, between three ^ characters.

        ^^^
        {FETCH}{SI_DOCS_URL}/reference/asset/function.md{/FETCH}
        ^^^
    - role: user
      content: >
        What follows is the current System Initiative Import function API documentation as markdown, between three ^ characters.

        ^^^
        Management Functions
        ====================

        Management functions are a sixth type of asset function, which can do many more things than
        the other five types. We will focus here on import functions, which use the resourceId of
        an asset to import the resource from an external system and update the asset's properties.

        Example Import Function
        -----------------------
        This is an example of an import function that pulls in an AWS EKS Cluster resource:

        ```typescript
        async function main({
            thisComponent
        }: Input): Promise<Output> {

            const component = thisComponent.properties;
            let clusterName = _.get(component, ["si", "resourceId"]);
            const region = component.domain?.extra?.Region || "";

            if (!clusterName) {
                return {
                    status: "error",
                    message: "Cluster Name is required for importing the resource.",
                };
            }

            // Fetch the EKS Cluster details using AWS CLI
            const eksClusterResp = await siExec.waitUntilEnd("aws", [
                "eks",
                "describe-cluster",
                "--region",
                region,
                "--name",
                clusterName,
            ]);

            if (eksClusterResp.exitCode !== 0) {
                console.error(eksClusterResp.stderr);
                return {
                    status: "error",
                    message: `Unable to fetch EKS cluster details: AWS CLI exited with non-zero code ${eksClusterResp.exitCode} ${eksClusterResp}`,
                };
            }

            const eksCluster = JSON.parse(eksClusterResp.stdout).cluster;

            // Map EKS cluster details to component properties
            component["domain"]["name"] = eksCluster.name || "";
            component["domain"]["version"] = eksCluster.version || "";
            component["domain"]["roleArn"] = eksCluster.roleArn || "";
            
            // Map resourcesVpcConfig properties
            component["domain"]["resourcesVpcConfig"] = {
                subnetIds: eksCluster.resourcesVpcConfig.subnetIds || [],
                securityGroupIds: eksCluster.resourcesVpcConfig.securityGroupIds || [],
                endpointPublicAccess: eksCluster.resourcesVpcConfig.endpointPublicAccess || false,
                endpointPrivateAccess: eksCluster.resourcesVpcConfig.endpointPrivateAccess || false,
                publicAccessCidrs: eksCluster.resourcesVpcConfig.publicAccessCidrs || []
            };
            
            // Map kubernetesNetworkConfig properties
            component["domain"]["kubernetesNetworkConfig"] = {
                serviceIpv4Cidr: eksCluster.kubernetesNetworkConfig?.serviceIpv4Cidr || "",
                ipFamily: eksCluster.kubernetesNetworkConfig?.ipFamily || ""
            };

            // Map enabled logging types
            component["domain"]["enabledLoggingTypes"] = eksCluster.logging?.clusterLogging
                .filter((log: any) => log.enabled)
                .flatMap((log: any) => log.types) || [];

            // Map tags
            component["domain"]["tags"] = eksCluster.tags || {};

            // Optional mapping for encryptionConfig, certificateAuthority, or other fields can be added similarly if required

            // Return the updated component
            return {
                status: "ok",
                message: JSON.stringify(eksCluster),
                ops: {
                    update: {
                        self: {
                            properties: {
                                ...component, // Push updated component properties back onto the tree
                            }
                        }
                    },
                    actions: {
                        self: {
                            remove: ["create"],
                            add: ["refresh"],
                        }
                    }
                }
            };
        }
        ```
        ^^^
    - role: user
      content: >
        What follows is the official documentation for an AWS CLI command as HTML, between three ^ characters.

        ^^^
        {FETCH}{AWS_CLI_DOCS_URL}/{AWS_COMMAND}/{AWS_SUBCOMMAND}.html{/FETCH}
        ^^^
    - role: user
      content: >
        Create the management function that calls the AWS CLI command and imports the resource.
        
        Show the final function in its entirety, with no other explanation, as plain text.
        
        Do not wrap the code in markdown delimiters.
